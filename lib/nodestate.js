// Generated by CoffeeScript 1.3.3
(function() {
  var EventEmitter, NodeState,
    __slice = [].slice;

  EventEmitter = require('events').EventEmitter;

  NodeState = (function() {

    function NodeState(config) {
      var event, events, fn, from_state, state, state_name, states, to, to_states, transitions, _base, _base1, _ref, _ref1, _ref2, _ref3, _ref4;
      this.config = config != null ? config : {};
      this._notifier = new EventEmitter;
      this.disabled = false;
      states = {};
      _ref = this.states;
      for (state in _ref) {
        events = _ref[state];
        states[state] = {};
        for (event in events) {
          fn = events[event];
          states[state][event] = fn.bind(this);
        }
      }
      this.states = states;
      transitions = {};
      _ref1 = this.transitions;
      for (from_state in _ref1) {
        to_states = _ref1[from_state];
        transitions[from_state] = {};
        for (to in to_states) {
          fn = to_states[to];
          transitions[from_state][to] = fn.bind(this);
        }
      }
      this.transitions = transitions;
      this.current_state_name = (_ref2 = this.config.initial_state) != null ? _ref2 : ((function() {
        var _results;
        _results = [];
        for (state_name in this.states) {
          _results.push(state_name);
        }
        return _results;
      }).call(this))[0];
      this.current_state = this.states[this.current_state_name];
      this.current_data = this.config.initial_data;
      this._current_timeout = null;
      if ((_ref3 = (_base = this.config).autostart) == null) {
        _base.autostart = false;
      }
      if ((_ref4 = (_base1 = this.config).sync_goto) == null) {
        _base1.sync_goto = false;
      }
      if (this.config.autostart) {
        this.goto(this.current_state_name);
      }
    }

    NodeState.prototype.goto = function(state_name, data) {
      var callback, event_name, previous_state_name, transition, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
        _this = this;
      if (this.disabled) {
        return;
      }
      this.current_data = data != null ? data : this.current_data;
      previous_state_name = this.current_state_name;
      if (this._current_timeout) {
        clearTimeout(this._current_timeout);
      }
      _ref = this.current_state;
      for (event_name in _ref) {
        callback = _ref[event_name];
        this._notifier.removeListener(event_name, callback);
      }
      this.current_state_name = state_name;
      this.current_state = this.states[this.current_state_name];
      _ref1 = this.current_state;
      for (event_name in _ref1) {
        callback = _ref1[event_name];
        this._notifier.on(event_name, callback);
      }
      callback = function(data) {
        _this.current_data = data;
        return _this._notifier.emit('Enter', _this.current_data);
      };
      transition = (_ref2 = (_ref3 = (_ref4 = (_ref5 = (_ref6 = this.transitions[previous_state_name]) != null ? _ref6[state_name] : void 0) != null ? _ref5 : (_ref7 = this.transitions['*']) != null ? _ref7[state_name] : void 0) != null ? _ref4 : (_ref8 = this.transitions[previous_state_name]) != null ? _ref8['*'] : void 0) != null ? _ref3 : (_ref9 = this.transitions['*']) != null ? _ref9['*'] : void 0) != null ? _ref2 : function(data, cb) {
        return cb(data);
      };
      if (this.config.sync_goto) {
        return transition(this.current_data, callback);
      } else {
        return process.nextTick(function() {
          return transition(_this.current_data, callback);
        });
      }
    };

    NodeState.prototype.raise = function(event_name, data) {
      return this._notifier.emit(event_name, data);
    };

    NodeState.prototype.wait = function(milliseconds) {
      var _this = this;
      return this._current_timeout = setTimeout(function() {
        return _this._notifier.emit('WaitTimeout', milliseconds, _this.current_data);
      }, milliseconds);
    };

    NodeState.prototype.unwait = function() {
      if (this._current_timeout) {
        return clearTimeout(this._current_timeout);
      }
    };

    NodeState.prototype.start = function(data) {
      if (data != null) {
        this.current_data = data;
      }
      return this.goto(this.current_state_name);
    };

    NodeState.prototype.stop = function() {
      this._notifier.removeAllListeners();
      return this.unwait();
    };

    NodeState.prototype.disable = function() {
      if (this.disabled) {
        return;
      }
      this.stop();
      return this.disabled = true;
    };

    NodeState.prototype.enable = function(state, data) {
      if (!this.disabled) {
        return;
      }
      this.disabled = false;
      if (state != null) {
        return this.goto(state, data);
      }
    };

    NodeState.prototype.wrapCb = function(fn) {
      var _this = this;
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (_this.disabled) {
          return;
        }
        return fn.apply(null, args);
      };
    };

    NodeState.prototype.states = {};

    NodeState.prototype.transitions = {};

    return NodeState;

  })();

  module.exports = NodeState;

}).call(this);
